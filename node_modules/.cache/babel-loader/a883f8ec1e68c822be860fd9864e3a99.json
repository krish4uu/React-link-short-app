{"ast":null,"code":"var _jsxFileName = \"/Users/krish/Desktop/BIO-interview/bio-front-end/src/url-context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UrlContext = /*#__PURE__*/React.createContext();\n\nfunction UrlReducer(state, action) {\n  _s();\n\n  React.useEffect(() => {\n    console.log(\"hello everytime\");\n  }, [state]);\n\n  switch (action.type) {\n    case \"short_url\":\n      {\n        console.log(\"from context\");\n        return { ...state,\n          urls: state.urls.concat([action.url])\n        };\n      }\n\n    default:\n      {\n        throw new Error(`Unhandled action type: ${action.type}`);\n      }\n  }\n}\n\n_s(UrlReducer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = UrlReducer;\n\nfunction UrlProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = React.useReducer(UrlReducer, {\n    urls: []\n  }); // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n\n  const value = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(UrlContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n}\n\n_s2(UrlProvider, \"XzPE1NJJ5V6RwktrS/685mhlBoo=\");\n\n_c2 = UrlProvider;\n\nfunction useUrls() {\n  _s3();\n\n  const context = React.useContext(UrlContext);\n\n  if (context === undefined) {\n    throw new Error(\"useCount must be used within a CountProvider\");\n  }\n\n  return context;\n}\n\n_s3(useUrls, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { UrlProvider, useUrls };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UrlReducer\");\n$RefreshReg$(_c2, \"UrlProvider\");","map":{"version":3,"sources":["/Users/krish/Desktop/BIO-interview/bio-front-end/src/url-context.js"],"names":["React","UrlContext","createContext","UrlReducer","state","action","useEffect","console","log","type","urls","concat","url","Error","UrlProvider","children","dispatch","useReducer","value","useUrls","context","useContext","undefined"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,MAAMC,UAAU,gBAAGD,KAAK,CAACE,aAAN,EAAnB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AAAA;;AACjCL,EAAAA,KAAK,CAACM,SAAN,CAAgB,MAAM;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,GAFD,EAEG,CAACJ,KAAD,CAFH;;AAGA,UAAQC,MAAM,CAACI,IAAf;AACE,SAAK,WAAL;AAAkB;AAChBF,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,eAAO,EACL,GAAGJ,KADE;AAELM,UAAAA,IAAI,EAAEN,KAAK,CAACM,IAAN,CAAWC,MAAX,CAAkB,CAACN,MAAM,CAACO,GAAR,CAAlB;AAFD,SAAP;AAID;;AACD;AAAS;AACP,cAAM,IAAIC,KAAJ,CAAW,0BAAyBR,MAAM,CAACI,IAAK,EAAhD,CAAN;AACD;AAVH;AAYD;;GAhBQN,U;;KAAAA,U;;AAkBT,SAASW,WAAT,OAAmC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACjC,QAAM,CAACX,KAAD,EAAQY,QAAR,IAAoBhB,KAAK,CAACiB,UAAN,CAAiBd,UAAjB,EAA6B;AAAEO,IAAAA,IAAI,EAAE;AAAR,GAA7B,CAA1B,CADiC,CAEjC;AACA;;AACA,QAAMQ,KAAK,GAAG;AAAEd,IAAAA,KAAF;AAASY,IAAAA;AAAT,GAAd;AACA,sBAAO,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAEE,KAA5B;AAAA,cAAoCH;AAApC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;IANQD,W;;MAAAA,W;;AAQT,SAASK,OAAT,GAAmB;AAAA;;AACjB,QAAMC,OAAO,GAAGpB,KAAK,CAACqB,UAAN,CAAiBpB,UAAjB,CAAhB;;AACA,MAAImB,OAAO,KAAKE,SAAhB,EAA2B;AACzB,UAAM,IAAIT,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,SAAOO,OAAP;AACD;;IANQD,O;;AAQT,SAASL,WAAT,EAAsBK,OAAtB","sourcesContent":["import * as React from \"react\";\n\nconst UrlContext = React.createContext();\n\nfunction UrlReducer(state, action) {\n  React.useEffect(() => {\n    console.log(\"hello everytime\");\n  }, [state]);\n  switch (action.type) {\n    case \"short_url\": {\n      console.log(\"from context\");\n      return {\n        ...state,\n        urls: state.urls.concat([action.url]),\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`);\n    }\n  }\n}\n\nfunction UrlProvider({ children }) {\n  const [state, dispatch] = React.useReducer(UrlReducer, { urls: [] });\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = { state, dispatch };\n  return <UrlContext.Provider value={value}>{children}</UrlContext.Provider>;\n}\n\nfunction useUrls() {\n  const context = React.useContext(UrlContext);\n  if (context === undefined) {\n    throw new Error(\"useCount must be used within a CountProvider\");\n  }\n  return context;\n}\n\nexport { UrlProvider, useUrls };\n"]},"metadata":{},"sourceType":"module"}