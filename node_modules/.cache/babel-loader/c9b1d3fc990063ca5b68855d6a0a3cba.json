{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/krish/Desktop/Interview/bio-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/Users/krish/Desktop/Interview/bio-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/krish/Desktop/Interview/bio-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"/Users/krish/Desktop/Interview/bio-front-end/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/krish/Desktop/Interview/bio-front-end/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grabber = void 0;\n\nvar Utils_1 = require(\"../../../Utils\");\n\nvar Core_1 = require(\"../../../Core\");\n\nvar Grabber = /*#__PURE__*/function (_Core_1$ExternalInter) {\n  _inherits(Grabber, _Core_1$ExternalInter);\n\n  var _super = _createSuper(Grabber);\n\n  function Grabber(container) {\n    _classCallCheck(this, Grabber);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Grabber, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n      return events.onHover.enable && !!mouse.position && (0, Utils_1.isInArray)(\"grab\", events.onHover.mode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"interact\",\n    value: function interact() {\n      var _a;\n\n      var container = this.container,\n          options = container.actualOptions,\n          interactivity = options.interactivity;\n\n      if (interactivity.events.onHover.enable && container.interactivity.status === Core_1.Constants.mouseMoveEvent) {\n        var mousePos = container.interactivity.mouse.position;\n\n        if (!mousePos) {\n          return;\n        }\n\n        var distance = container.retina.grabModeDistance,\n            query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n        var _iterator = _createForOfIteratorHelper(query),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var particle = _step.value;\n            var pos = particle.getPosition(),\n                pointDistance = (0, Utils_1.getDistance)(pos, mousePos);\n\n            if (pointDistance <= distance) {\n              var grabLineOptions = interactivity.modes.grab.links,\n                  lineOpacity = grabLineOptions.opacity,\n                  opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n              if (opacityLine <= 0) {\n                continue;\n              }\n\n              var optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n\n              if (!container.particles.grabLineColor) {\n                var linksOptions = options.interactivity.modes.grab.links;\n                container.particles.grabLineColor = (0, Utils_1.getLinkRandomColor)(optColor, linksOptions.blink, linksOptions.consent);\n              }\n\n              var colorLine = (0, Utils_1.getLinkColor)(particle, undefined, container.particles.grabLineColor);\n\n              if (!colorLine) {\n                return;\n              }\n\n              container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }]);\n\n  return Grabber;\n}(Core_1.ExternalInteractorBase);\n\nexports.Grabber = Grabber;","map":{"version":3,"sources":["/Users/krish/Desktop/Interview/bio-front-end/node_modules/tsparticles/Interactions/External/Grab/Grabber.js"],"names":["Object","defineProperty","exports","value","Grabber","Utils_1","require","Core_1","container","mouse","interactivity","events","actualOptions","onHover","enable","position","isInArray","mode","_a","options","status","Constants","mouseMoveEvent","mousePos","distance","retina","grabModeDistance","query","particles","quadTree","queryCircle","particle","pos","getPosition","pointDistance","getDistance","grabLineOptions","modes","grab","links","lineOpacity","opacity","opacityLine","optColor","color","grabLineColor","linksOptions","getLinkRandomColor","blink","consent","colorLine","getLinkColor","undefined","canvas","drawGrabLine","ExternalInteractorBase"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grabber = void 0;\nconst Utils_1 = require(\"../../../Utils\");\nconst Core_1 = require(\"../../../Core\");\nclass Grabber extends Core_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, mouse = container.interactivity.mouse, events = container.actualOptions.interactivity.events;\n        return events.onHover.enable && !!mouse.position && (0, Utils_1.isInArray)(\"grab\", events.onHover.mode);\n    }\n    reset() {\n    }\n    interact() {\n        var _a;\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Core_1.Constants.mouseMoveEvent) {\n            const mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            const distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n            for (const particle of query) {\n                const pos = particle.getPosition(), pointDistance = (0, Utils_1.getDistance)(pos, mousePos);\n                if (pointDistance <= distance) {\n                    const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n                    if (opacityLine <= 0) {\n                        continue;\n                    }\n                    const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n                    if (!container.particles.grabLineColor) {\n                        const linksOptions = options.interactivity.modes.grab.links;\n                        container.particles.grabLineColor = (0, Utils_1.getLinkRandomColor)(optColor, linksOptions.blink, linksOptions.consent);\n                    }\n                    const colorLine = (0, Utils_1.getLinkColor)(particle, undefined, container.particles.grabLineColor);\n                    if (!colorLine) {\n                        return;\n                    }\n                    container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n                }\n            }\n        }\n    }\n}\nexports.Grabber = Grabber;\n"]},"metadata":{},"sourceType":"script"}